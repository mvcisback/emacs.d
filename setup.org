#+TITLE:     Marcell Vazquez-Chanlatte's Config file
#+AUTHOR:    Marcell Vazquez-Chanlatte
#+EMAIL:     mvc@linux.com
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:t toc:4 \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
* General
** Packages
   #+BEGIN_SRC emacs-lisp  :export code
     (require 'package)
     (package-initialize)
     (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                              ("marmalade" . "http://marmalade-repo.org/packages/")
                              ))
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

   #+END_SRC
** UI
   #+BEGIN_SRC emacs-lisp 
   (setq inhibit-startup-screen t)
   (scroll-bar-mode -1)
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (blink-cursor-mode -1)
   (line-number-mode t)
   (column-number-mode t)
   (size-indication-mode t)
   (fset 'yes-or-no-p 'y-or-n-p)
   (load-theme 'zenburn t)

   (add-to-list 'default-frame-alist '(font . "Inconsolata-10"))
   (set-default-font "Inconsolata-10")
   ;;-- Death to tabs!
   (setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
   (setq-default tab-width 8)            ;; but maintain correct appearance
   #+END_SRC
** Backups
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
         backup-by-copying t    ; Don't delink hardlinks
         version-control t      ; Use version numbers on backups
         delete-old-versions t  ; Automatically delete excess backups
         kept-new-versions 20   ; how many of the newest versions to keep
         kept-old-versions 5    ; and how many of the old
         )
   #+END_SRC
** IDO and Icomplete
   #+BEGIN_SRC emacs-lisp 
     (setq ido-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode 1)
     (icomplete-mode 1)
   #+END_SRC
** Yasnippet
   #+BEGIN_SRC emacs-lisp 
     (yas-global-mode 1)
   #+END_SRC
** Jumping around
#+BEGIN_SRC emacs-lisp 
  (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
#+END_SRC
** Other
#+BEGIN_SRC emacs-lisp 
  ;;-- Set default browser
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "firefox")
  ;; Buffer Management
  (defun kill-other-buffers ()
    "Kill all buffers but the current one.
  Don't mess with special buffers."
    (interactive)
    (dolist (buffer (buffer-list))
      (unless (or (eql buffer (current-buffer)) (not (buffer-file-name buffer)))
        (kill-buffer buffer))))
  (global-set-key (kbd "C-c k") 'kill-other-buffers)
#+END_SRC
*** Eval and Replace
    #+BEGIN_SRC emacs-lisp
      (defun eval-and-replace ()                     
        "Replace the preceding sexp with its value." 
        (interactive)                                
        (backward-kill-sexp)                         
        (condition-case nil                          
            (prin1 (eval (read (current-kill 0)))    
                   (current-buffer))                 
          (error (message "Invalid expression")      
                 (insert (current-kill 0)))))
        (global-set-key (kbd "C-c e") 'eval-and-replace)
    #+END_SRC
* Mail
#+BEGIN_SRC emacs-lisp
  (setq
   user-mail-address "mvc@linux.com"
   user-full-name  "Marcell J. Vazquez-Chanlatte"
   message-signature
   (concat
    "Marcell J. Vazquez-Chanlatte\n"
    "https://github.com/mvcisback\n"))
  (require 'smtpmail)
  (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-stream-type 'starttls
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587)
  
  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)
#+END_SRC
* News
  #+BEGIN_SRC emacs-lisp
    (setq gnus-select-method '(nntp "news.gwene.org"))
  #+END_SRC
* Code
** Paren Control
  #+BEGIN_SRC emacs-lisp 
    ;; Paren Matching
    (require 'paren)
    (setq show-paren-style 'parenthesis)
    (show-paren-mode +1)
    ;; Autopair
    (electric-pair-mode +1)  
  #+END_SRC
   
** Ocaml
#+BEGIN_SRC emacs-lisp 
  (setq auto-mode-alist
        (append '(("\\.ml[ily]?$" . tuareg-mode)
                  ("\\.topml$" . tuareg-mode))
                auto-mode-alist))
#+END_SRC
** C
#+BEGIN_SRC emacs-lisp 
  (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)
#+END_SRC
** Java
   #+BEGIN_SRC emacs-lisp
     (add-hook 'java-mode-hook 'subword-mode)
   #+END_SRC
** Arudino
   #+BEGIN_SRC emacs-lisp 
   (add-to-list 'auto-mode-alist '("\\.ino" . c-mode))
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp 
     (require `nose)
     ;; EIN (Ipython notebook)
     (defalias 'python-indent-line-function 'python-indent-line)
     ;; Make ipython the python shell
     
     (setq
      python-shell-interpreter "ipython"
      python-shell-interpreter-args "--pylab"
      python-shell-prompt-regexp "In \\[[0-9]+\\]: "
      python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
      python-shell-completion-setup-code
        "from IPython.core.completerlib import module_completion"
      python-shell-completion-module-string-code
        "';'.join(module_completion('''%s'''))\n"
      python-shell-completion-string-code
        "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
     (require `auto-complete)
     (add-hook 'python-mode-hook 'jedi:setup)
     (add-hook 'python-mode-hook 'jedi:ac-setup)
     (add-hook 'python-mode-hook 'auto-complete-mode)
     (setq jedi:setup-keys t)                      ; optional
     (setq jedi:complete-on-dot t)                 ; optional
     (setq jedi:tooltip-method nil)
   #+END_SRC
** Lisp Like
#+BEGIN_SRC emacs-lisp 
  ;; Turn on paraedit
  (autoload 'paredit-mode "paredit"
    "Minor mode for pseudo-structurally editing Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       (lambda () (paredit-mode +1)))
  (add-hook 'lisp-mode-hook             (lambda () (paredit-mode +1)))
  (add-hook 'lisp-interaction-mode-hook (lambda () (paredit-mode +1)))
  ;; Turn on el doc
  (autoload 'turn-on-eldoc-mode "eldoc" nil t)
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC
** Org Mode
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-export-backends 'md)
     (setq org-agenda-files (quote ("~/work/org/agenda.org" "~/work/org/schedule.org" "~/work/org/notes.org")))
     ;;-- Standard key bindings
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)
     (define-key global-map "\C-cl" 'org-store-link)
     (define-key global-map "\C-ca" 'org-agenda)
     ;;-- Captures
     (setq org-default-notes-file "~/work/org/notes.org")
     (define-key global-map "\C-cc" 'org-capture)
     ;;-- Synatx Highlighting for Code
     (setq org-src-fontify-natively t)
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)))
   #+END_SRC
** Haskell
   #+BEGIN_SRC emacs-lisp
     (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
   #+END_SRC
